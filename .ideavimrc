""" Map leader to space --------------------
let mapleader=" "

""" Plugins  --------------------------------
set sneak
set surround
" set commentary
set argtextobj
set easymotion
set textobj-entire
set ReplaceWithRegister
set exchange
Plug 'machakann/vim-highlightedyank'
set NERDTree
Plug 'terryma/vim-multiple-cursors'
set which-key
Plug 'dbakker/vim-paragraph-motion'

""" Plug settings -------------------------
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKeyDesc_leader = "<leader> Leader key"
let g:WhichKey_DefaultDelay = 200

map C-n <Plug>NextWholeOccurrence

map <leader>pf :NERDTreeFind<CR>
map <leader>pp :NERDTreeToggle<CR>

"" 取消 s 键被占用, 回归默认功能
unmap s
nmap f <Plug>(sneak-s)
vmap f <Plug>(sneak-s)
omap f <Plug>(sneak-s)
"" 取消 S 键被占用, 回归默认功能
unmap S
nmap F <Plug>(sneak-S)
vmap F <Plug>(sneak-S)
"" 比如 aabbccdd 键入'df dd', 结果为 dd，意思是删除字母至 dd
omap F <Plug>(sneak-S)

et timeoutlen=5000

""" Common settings -------------------------
" 开启输入法自动切换功能
set keep-english-in-normal
" 保证光标离顶部有 5 行
set scrolloff=5
" 随着输入实时高亮匹配结果
set incsearch
" 搜索高亮显示
" set hlsearch
" 搜索时智能区分大小写
set smartcase
" 在状态栏显示当前编辑模式
set showmode
" 剪贴板写入系统剪贴板
set clipboard+=unnamed

""" Idea specific settings ------------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep

""" Mappings --------------------------------
" Leader
map <leader>1 <Action>(GoToTab1)
map <leader>2 <Action>(GoToTab2)
map <leader>3 <Action>(GoToTab3)
map <leader>4 <Action>(GoToTab4)
map <leader>5 <Action>(GoToTab5)
map <leader>6 <Action>(GoToTab6)
map <leader>7 <Action>(GoToTab7)
map <leader>8 <Action>(GoToTab8)
map <leader>9 <Action>(GoToTab9)

"" 行首
nnoremap H ^
onoremap H ^
vnoremap H ^
"" 行尾
nnoremap L g_
onoremap L g_
vnoremap L g_

"" K 向上移动 5 行
nnoremap J 5j
"" J 向下移动 5 行
nnoremap K 5k

"" 取消撤销
map U <C-R>

" 删除方法
map <leader>df V$%d
let g:WhichKeyDesc_df = "<leader>df 删除方法"

" 向下插入一列空行，光标保持在原位置
nnoremap <silent> zj o<Esc>k
let g:WhichKeyDesc_zj = "zj 向下插入空行"
" 向上插入一列空行，光标保持在原位置
nnoremap <silent> zk O<Esc>j
let g:WhichKeyDesc_zk = "zk 向上插入空行"

"
vnoremap < <gv
vnoremap > >gv

" 模拟鼠标放上去的提示信息
map <Leader>gh <Action>(ShowErrorDescription)
let g:WhichKeyDesc_gh = "<Leader>gh 显示错误信息"
map <Leader>fj <Action>(ShowIntentionActions)
let g:WhichKeyDesc_fj = "<leader>fj 代码智能提示"
map gh <Action>(QuickJavaDoc)
let g:WhichKeyDesc_gh = "gh 悬浮提示"

" 前进后退
map <c-o> <Action>(Back)
map <c-i> <Action>(Forward)

" Terminal
let g:WhichKeyDesc_t = "<leader>t 终端"
nmap <leader>to <Action>(Terminal.OpenInTerminal)
let g:WhichKeyDesc_to = "<leader>to 打开新的终端"
nmap <leader>tt <Action>(ActivateTerminalToolWindow)
let g:WhichKeyDesc_tt = "<leader>tt 打开当前终端"

" 代码折叠/展开 (Code fold/expand)
map zm <Action>(CollapseRegion)
let g:WhichKeyDesc_zm = "zm 折叠代码"
map za <Action>(ExpandRegion)
let g:WhichKeyDesc_za = "za 展开代码"
map zM <Action>(CollapseAllRegions)
let g:WhichKeyDesc_zM = "zM 折叠所有代码"
map zR <Action>(ExpandAllRegions)
let g:WhichKeyDesc_zR = "zR 展开所有代码"

" 注释 (Comment)
" map gc <Action>(CommentByLineComment)
" let g:WhichKeyDesc_gc = "<leader>gc 行注释"

" eslint
map <leader>es <Action>(Javascript.Linters.EsLint.Fix)
let g:WhichKeyDesc_es = "<leader>es eslint 格式化"

" 文件结构弹窗
map <leader>o <Action>(FileStructurePopup)
let g:WhichKeyDesc_o = "<leader>o 打开文件结构弹窗"

""
map <leader>sw <Action>(SurroundWith)
let g:WhichKeyDesc_sw = "<leader>sw SurroundWith"

" 打开 git 快捷操作弹窗"
let g:WhichKeyDesc_v = "<leader>v git操作"

nmap <leader>vp <Action>(Vcs.QuickListPopupAction)
let g:WhichKeyDesc_vp = "<leader>vp 打开 git 快捷操作弹窗"
" 代开当前文件 git 历史"
nmap <leader>vh <Action>(Vcs.ShowTabbedFileHistory)
let g:WhichKeyDesc_vh = "<leader>vh 打开当前文件 git 历史"

" 项目管理"
let g:WhichKeyDesc_p = "<leader>p Project 管理"

map <leader>pr <Action>(ManageRecentProjects)
let g:WhichKeyDesc_pr = "<leader>pr 打开项目管理"
map <leader>pl <Action>(RecentProjectListGroup)
let g:WhichKeyDesc_pl = "<leader>pl 打开最近打开的项目列表"
map <leader>pc <Action>(CloseProject)
let g:WhichKeyDesc_pc = "<leader>pc 关闭当前项目"

" 分屏"
let g:WhichKeyDesc_w = "<leader>w 窗口管理"

nmap <leader>ws <Action>(SplitVertically)
let g:WhichKeyDesc_ws = "<leader>ws 垂直分屏"
nmap <leader>wu <Action>(Unsplit)
let g:WhichKeyDesc_wu = "<leader>wu 取消分屏"
nmap <leader>wh <Action>(CloseAllToTheLeft)
let g:WhichKeyDesc_wh = "<leader>wh 关闭左侧所有 Tab"
nmap <leader>wl <Action>(CloseAllToTheRight)
let g:WhichKeyDesc_wl = "<leader>wl 关闭右侧所有 Tab"
nmap <leader>wx <Action>(CloseAllEditorsButActive)
let g:WhichKeyDesc_wx = "<leader>wx 关闭所有 Tab, 除了当前激活的" "
nmap <leader>wr <Action>(ReopenClosedTab)
let g:WhichKeyDesc_wr = "<leader>wr 重新打开关闭的 Tab"
nmap <leader>wq <Action>(CloseContent)
let g:WhichKeyDesc_wq = "<leader>wq 关闭当前 Tab"
nmap <leader>wc <Action>(HideAllWindows)
let g:WhichKeyDesc_wc = "<leader>wc 隐藏所有窗口"
nmap <leader>wa <Action>(HideActiveWindow)
let g:WhichKeyDesc_wa = "<leader>wa 隐藏当前窗口"

" code refactor "
let g:WhichKeyDesc_r = "<leader>r 代码重构"

nmap <leader>rp <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_rp = "<leader>rp 打开重构弹窗"
nmap <Leader>rf <Action>(ReformatCode)
let g:WhichKeyDesc_rf = "<Leader>rf 格式化代码"
nmap <Leader>rn <Action>(RenameElement)
let g:WhichKeyDesc_rn = "<Leader>rn 重命名"

" 代码导航"
let g:WhichKeyDesc_f = "<leader>f 代码导航"

nmap <leader>fr <Action>(Replace)
let g:WhichKeyDesc_fr = "<leader>fr 替换"
nmap <leader>ff <Action>(SearchEverywhere)
let g:WhichKeyDesc_ff = "<leader>ff SearchEverywhere"
nmap <leader>fp <Action>(FindInPath)
let g:WhichKeyDesc_fp = "<leader>fp FindInPath"
nmap <leader>fe <Action>(RecentFiles)
let g:WhichKeyDesc_fe = "<leader>fe 打开最近打开的文件列表"
